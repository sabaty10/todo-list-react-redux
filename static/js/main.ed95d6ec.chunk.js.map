{"version":3,"sources":["reducers/index.js","components/MakeTodo.js","actions/index.js","components/OptionsButton.js","components/TodoList.js","components/App.js","index.js"],"names":["id","allReducers","combineReducers","todoList","action","type","text","payload","status","forEach","todo","console","log","filter","MakeTodo","setText","newTodoButton","setNewTodoButton","editFlag","setChooseStatusButton","dispatch","useDispatch","useSelector","state","className","placeholder","value","onChange","e","target","editTodo","setNewTodo","onClick","alert","addTodo","length","defaultValue","name","connect","setOptionsButton","optionsButton","setEditFlag","title","find","changeTodoStatus","deleteTodo","TodoList","useState","todoStatus","setTodoStatus","useEffect","App","chooseStatusButton","map","store","createStore","reducers","subscribe","getState","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.ed95d6ec.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\nlet id = 0;\r\nconst todoList = (todoList = [], action) => {\r\n    switch (action.type) {\r\n        case 'ADD_TODO':\r\n            return [...todoList, { id: id++, text: action.payload, status: false }]\r\n\r\n        case 'COMPLETE_TODO':\r\n            todoList.forEach(todo => {\r\n                if (todo.id === action.payload) {\r\n                    todo.status = !todo.status\r\n                }\r\n            });\r\n            console.log(todoList);\r\n            return [...todoList];\r\n\r\n        case 'DELETE_TODO':\r\n            return todoList.filter((todo) => {\r\n                return todo.id !== action.payload\r\n            });\r\n\r\n        case 'EDIT_TODO':\r\n            todoList.forEach(todo => {\r\n                if (todo.id === action.payload.id) {\r\n                    todo.text = action.payload.text\r\n                }\r\n            });\r\n            return [...todoList];\r\n        default:\r\n            return [...todoList]\r\n    }\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n    todoList: todoList\r\n});\r\n\r\nexport default allReducers;","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addTodo, editTodo } from \"../actions\";\r\nimport \"../styles/make-todo.css\";\r\n\r\nconst MakeTodo = ({ text, setText, newTodoButton, setNewTodoButton, editFlag, setChooseStatusButton }) => {\r\n    const dispatch = useDispatch();\r\n    const todoList = useSelector(state => state.todoList)\r\n\r\n    const setOptionType = (e) => {\r\n        setChooseStatusButton(e.target.value);\r\n    }\r\n\r\n\r\n    const setNewTodo = (e) => {\r\n        //new todo\r\n        if (!newTodoButton) {\r\n            setText(e.target.value)\r\n            console.log(text);\r\n        } else {//edit todo\r\n            setText(e.target.value)\r\n            dispatch(editTodo(e.target.value, editFlag));\r\n        }\r\n        console.log(todoList);\r\n    }\r\n    return (\r\n        <div className=\"make-to-do-container\">\r\n            <input\r\n                placeholder=\"Make a new Note...\"\r\n                value={text}\r\n                onChange={(e) => setNewTodo(e)}\r\n                className=\"todo-input\"\r\n            >\r\n            </input>\r\n\r\n            {\r\n                newTodoButton ? <button\r\n                    className=\"edit-todo\"\r\n                    onClick={() => {\r\n                        // dispatch(editTodo(text, editFlag));\r\n                        setText(\"\");\r\n                        setNewTodoButton(!newTodoButton)\r\n                    }}>\r\n\r\n                    <i className=\"rotate chevron circle down icon big\"></i>\r\n                </button>\r\n                    :\r\n                    <button\r\n                        className=\"create-todo\"\r\n                        onClick={() => {\r\n                            if (!text) {\r\n                                return alert(\"Todo cannot be empty\");\r\n                            } else\r\n                                dispatch(addTodo(text));\r\n                            setText(\"\");\r\n                        }}>\r\n                        <i className=\"rotate chevron circle right icon big\"></i>\r\n                    </button>\r\n            }\r\n            {todoList.length !== 0 ? <select className=\"select-button\" defaultValue='All' onChange={setOptionType} id=\"todo-status\" name=\"todo-status\">\r\n                <option value='All'>All</option>\r\n                <option value='Done'>Done</option>\r\n                {/* <option value=''>Deleted</option> */}\r\n            </select>\r\n                :\r\n                null}\r\n\r\n        </div >\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default MakeTodo;\r\n","export const addTodo = (text) => {\r\n    return {\r\n        type: 'ADD_TODO',\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const changeTodoStatus = (id) => {\r\n    return {\r\n        type: 'COMPLETE_TODO',\r\n        payload: id\r\n    }\r\n}\r\nexport const deleteTodo = (id) => {\r\n    return {\r\n        type: 'DELETE_TODO',\r\n        payload: id\r\n    }\r\n}\r\nexport const editTodo = (text, id) => {\r\n    return {\r\n        type: 'EDIT_TODO',\r\n        payload: {\r\n            text: text,\r\n            id: id\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { changeTodoStatus, deleteTodo, editTodo } from '../actions';\r\n\r\n\r\nconst OptionsButton = ({ todoList, id, setOptionsButton, optionsButton, setText, newTodoButton, setNewTodoButton, setEditFlag }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const currentTodo = () => {\r\n        setText(todoList.filter((todo) => todo.id === id)[0].text);\r\n    }\r\n    return (\r\n\r\n        <div className='buttons'>\r\n            {/* close options */}\r\n            <button\r\n                title=\"Close Options\"\r\n                className=\"close-button\"\r\n                onClick={() => setOptionsButton(!optionsButton)}>\r\n                X\r\n            </button>\r\n            {/* edit-button */}\r\n            <button\r\n                title=\"edit-button\"\r\n                className=\"edit-button\"\r\n                onClick={() => { currentTodo(); setNewTodoButton(!newTodoButton); setEditFlag(id) }}>\r\n                <i className=\"edit icon\"></i>\r\n            </button>\r\n            {/* Done / Cancel Todo */}\r\n            <button\r\n                title={todoList.find((todo) => {\r\n                    return (\r\n                        todo.id === id)\r\n                }).status ? 'Cancel' : \"Done\"}\r\n                onClick={() => dispatch(changeTodoStatus(id))}\r\n                className=\"button positive ui \">\r\n                {todoList.find((todo) => {\r\n                    return (\r\n                        todo.id === id)\r\n                }).status ? 'Cancel' : 'Done'}\r\n            </button>\r\n            {/* Delete Todo */}\r\n            <button\r\n                title=\"Delete Todo\"\r\n                onClick={() => dispatch(deleteTodo(id))}\r\n                className=\"button negative ui \"\r\n            >Delete\r\n            </button>\r\n        </div >\r\n\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return { todoList: state.todoList }\r\n\r\n}\r\nexport default connect(mapStateToProps)(OptionsButton);","import React, { useState, useEffect } from 'react';\r\nimport '../styles/todo-list.css';\r\nimport { useSelector } from 'react-redux';\r\nimport OptionsButton from './OptionsButton';\r\n\r\nconst TodoList = ({ id, setText, newTodoButton, setNewTodoButton, setEditFlag }) => {\r\n    const todoList = useSelector(state => state.todoList);\r\n    const [todoStatus, setTodoStatus] = useState('');\r\n    const [optionsButton, setOptionsButton] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (todoList.find((todo) => {\r\n            return (\r\n                todo.id === id);\r\n        }).status) {\r\n            setTodoStatus('complete');\r\n        } else {\r\n            setTodoStatus('');\r\n        }\r\n        setOptionsButton(false);\r\n    }, [todoList]);\r\n    return (\r\n        <div key={id} className={`todo-list-container ${todoStatus}`}>\r\n            {console.log(\"!\", todoStatus)}\r\n            <p>{todoList.find((todo) => {\r\n                return (\r\n                    todo.id === id);\r\n            }).text}\r\n            </p>\r\n\r\n            {optionsButton ?\r\n                <OptionsButton\r\n                    setText={setText}\r\n                    id={id}\r\n                    setOptionsButton={setOptionsButton}\r\n                    optionsButton={optionsButton}\r\n                    newTodoButton={newTodoButton}\r\n                    setNewTodoButton={setNewTodoButton}\r\n                    setEditFlag={setEditFlag} />\r\n                :\r\n                <button className=\"more-options\" onClick={() => setOptionsButton(!optionsButton)}> <i className=\"cog icon \"></i> </button>}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useState, useRef } from 'react';\r\nimport MakeTodo from './MakeTodo';\r\nimport TodoList from './TodoList'\r\nimport { useSelector } from 'react-redux';\r\nimport '../styles/resetDefaultStyle.css';\r\nimport '../styles/app.css';\r\n\r\nconst App = () => {\r\n    const todoList = useSelector(state => state.todoList)\r\n    const [text, setText] = useState(\"\");\r\n    const [newTodoButton, setNewTodoButton] = useState(false)\r\n    const [editFlag, setEditFlag] = useState(null)\r\n    const [chooseStatusButton, setChooseStatusButton] = useState('All')\r\n    // const inputEl = useRef();\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <h1>My Todo List</h1>\r\n            <MakeTodo\r\n                text={text}\r\n                setText={setText}\r\n                newTodoButton={newTodoButton}\r\n                setNewTodoButton={setNewTodoButton}\r\n                editFlag={editFlag}\r\n                setChooseStatusButton={setChooseStatusButton} />\r\n            {todoList ? todoList.filter((todo) => {\r\n                if (chooseStatusButton === 'Done') {\r\n                    return (\r\n                        todo.status === true\r\n                    )\r\n                } else {\r\n                    return (todo)\r\n                }\r\n            }).map((todo) => {\r\n                // { console.log(todoList.status) }\r\n                return (\r\n                    <TodoList\r\n                        id={todo.id}\r\n                        state={todo.state}\r\n                        setText={setText}\r\n                        newTodoButton={newTodoButton}\r\n                        setNewTodoButton={setNewTodoButton}\r\n                        setEditFlag={setEditFlag} />\r\n\r\n                )\r\n            }) : null}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { createStore } from 'redux';\r\nimport reducers from './reducers'\r\n\r\nimport App from './components/App.js';\r\nimport { Provider } from 'react-redux';\r\n\r\nexport const store = createStore(reducers);\r\nstore.subscribe(() => {\r\n    console.log(\"store changed!\", store.getState());\r\n})\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.querySelector('#root')\r\n)"],"sourceRoot":""}